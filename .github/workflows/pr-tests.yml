name: Pull Request Tests

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main

permissions:
  contents: read
  security-events: read
  pull-requests: write # For PR comments

jobs:
  pr-info:
    name: PR Information
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: PR Analysis
        run: |
          echo "## 📋 Pull Request Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR Title:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "**Base Branch:** ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**Head Branch:** ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if it's a dependabot PR
          if [[ "${{ github.event.pull_request.user.login }}" == "dependabot[bot]" ]]; then
            echo "🤖 **This is a Dependabot PR** - Automated dependency update" >> $GITHUB_STEP_SUMMARY
          fi

          # Count changed files
          CHANGED_FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files | length')
          echo "**Files Changed:** $CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-with-different-configs:
    name: Test Different Configurations
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        severity-threshold: ['low', 'medium', 'high', 'critical']
        exclude-dismissed: ['true', 'false']
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name:
          Test Configuration - ${{ matrix.severity-threshold }} severity,
          dismissed=${{ matrix.exclude-dismissed }}
        uses: ./
        with:
          jira-url: 'https://test.atlassian.net'
          jira-username: 'test@example.com'
          jira-api-token: 'test-token'
          jira-project-key: 'TEST'
          severity-threshold: ${{ matrix.severity-threshold }}
          exclude-dismissed: ${{ matrix.exclude-dismissed }}
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  test-edge-cases:
    name: Test Edge Cases
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test with minimal configuration
        uses: ./
        with:
          jira-url: 'https://minimal.atlassian.net'
          jira-username: 'minimal@test.com'
          jira-api-token: 'minimal-token'
          jira-project-key: 'MIN'
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Test with maximum configuration
        uses: ./
        with:
          jira-url: 'https://maximal.atlassian.net'
          jira-username: 'maximal@test.com'
          jira-api-token: 'maximal-token'
          jira-project-key: 'MAX'
          jira-issue-type: 'Security Vulnerability'
          jira-priority: 'Highest'
          jira-labels: 'security,dependabot,auto-created,urgent'
          jira-assignee: 'security-team'
          critical-due-days: '0'
          high-due-days: '1'
          medium-due-days: '7'
          low-due-days: '30'
          severity-threshold: 'low'
          exclude-dismissed: 'false'
          update-existing: 'true'
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  security-check:
    name: Security Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Run Security Audit
        run: npm audit --audit-level=moderate

      - name: Check for Secrets in Code
        run: |
          echo "🔍 Checking for potential secrets..."
          # Check for potential API tokens, passwords, etc.
          if grep -r -i "password\|secret\|token\|key" src/ --include="*.js" | grep -v "input" | grep -v "description"; then
            echo "⚠️ Potential secrets found in source code!"
            exit 1
          else
            echo "✅ No obvious secrets found in source code"
          fi

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Measure Test Performance
        run: |
          echo "⏱️ Running performance test..."
          START_TIME=$(date +%s)
          npm test
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "📊 Test execution time: ${DURATION} seconds" >> $GITHUB_STEP_SUMMARY

          # Warn if tests take too long
          if [ $DURATION -gt 60 ]; then
            echo "⚠️ Warning: Tests took longer than 60 seconds" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Test performance is acceptable" >> $GITHUB_STEP_SUMMARY
          fi

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Documentation
        run: |
          echo "## 📚 Documentation Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if README exists and has content
          if [ -f README.md ] && [ -s README.md ]; then
            README_LINES=$(wc -l < README.md)
            echo "✅ **README.md:** $README_LINES lines" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **README.md:** Missing or empty" >> $GITHUB_STEP_SUMMARY
          fi

          # Check if DEVELOPERS.md exists
          if [ -f DEVELOPERS.md ] && [ -s DEVELOPERS.md ]; then
            DEV_LINES=$(wc -l < DEVELOPERS.md)
            echo "✅ **DEVELOPERS.md:** $DEV_LINES lines" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **DEVELOPERS.md:** Missing or empty" >> $GITHUB_STEP_SUMMARY
          fi

          # Check if action.yml is properly documented
          if grep -q "description:" action.yml && grep -q "inputs:" action.yml; then
            echo "✅ **action.yml:** Properly documented" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **action.yml:** Missing descriptions" >> $GITHUB_STEP_SUMMARY
          fi

  pr-summary:
    name: PR Test Summary
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs:
      [
        pr-info,
        test-with-different-configs,
        test-edge-cases,
        security-check,
        performance-test,
        documentation-check
      ]

    steps:
      - name: Generate PR Summary
        run: |
          echo "## 🎯 Pull Request Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All pull request checks have been completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Checks:" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration Tests:** Multiple severity and filter combinations" >> $GITHUB_STEP_SUMMARY
          echo "- **Edge Case Tests:** Minimal and maximal configurations" >> $GITHUB_STEP_SUMMARY  
          echo "- **Security Checks:** Dependency audit and secret scanning" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests:** Test execution timing" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation:** README and developer guide validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Ready for review!**" >> $GITHUB_STEP_SUMMARY
